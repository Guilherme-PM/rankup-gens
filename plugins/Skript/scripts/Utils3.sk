# This script was written by Xqedii and sharing is not allowed!
# You can change and edit everything in this file if you want

# Utils3

command /help:
	trigger:
		set {_x} to chest inventory with 4 rows named {Config::GUIS::Help::%{Bedrock::%player%}%}
		set {_slots::*} to 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24
		loop {_slots::*}:
			set slot loop-value of {_x} to {Config::GUIS::Help::Slot%loop-counter%}
		open {_x} for player

command /staffchat [<text>]:
	aliases: sc
	permission: genblock.staffchat
	permission message: &cYou dont have permissions!
	trigger:
		if arg-1 is not set:
			send "&4&l(!) &cYou must enter text!"
		else:
			loop all players:
				if loop-player has permission "genblock.staffchat":
					send "&6&lSTAFF | &e%player% &6&lÂ» &a%arg-1%" to loop-player
					play sound "block.amethyst_block.place" with pitch 2 for loop-player

on tab complete of "/adminpanel":
	if player has permission "*":
		set tab completions for position 1 to "data", "setobjective", "startevent", "dungeons", "stats", "sellwand", "genslot", "customitems", "voteparty", "islandanimloc", "discoball", "level", "exp", "rebirth", "gens", "tokens", "givegen", "bypassedit", "bypassowner", "reset", "info", "tool"
		if tab arg-1 = "tool" or "tools":
			set tab completions for position 2 to "hoe", "pickaxe", "axe", "fishingrod"
		if tab arg-1 = "level" or "exp" or "rebirth" or "gens" or "reset" or "info" or "stats":
			set tab completions for position 2 to all players
		if tab arg-1 = "gens" or "tool" or "tools" or "level" or "exp":
			set tab completions for position 3 to "10", "20", "30", "40", "50", "60", "70", "80"
		if tab arg-1 = "rebirth":
			set tab completions for position 3 to integers between 0 and 9
		if tab arg-1 = "tokens":
			set tab completions for position 2 to "give", "take", "set"
			set tab completions for position 3 to all players
			set tab completions for position 4 to integers between 1 and 9
		if tab arg-1 = "givegen":
			set tab completions for position 2 to integers between 1 and size of {Generatory::*}
			set tab completions for position 3 to all players
		if tab arg-1 = "sellwand":
			set tab completions for position 2 to 50, 100, 250, 500, 1000
			set tab completions for position 3 to 1, 1.5, 2, 2.5, 3



command /adminpanel [<text>] [<text>] [<text>] [<number>]:
	permission: *
	permission message: %{Config::Global::Permission}%
	trigger:
		if arg-1 is not set:
			send ""
			send " <##00f818>&lAdmin &r<##00f818>Panel"
			send ""
			send " <##00f818>/adminpanel &ecustomitems &3- &7Open GUI with all custom items"
			send " <##00f818>/adminpanel &egenslot [amount] &3- &7Give extra gens slot item"
			send " <##00f818>/adminpanel &edata &3- &7Shows current info about Server"
			send " <##00f818>/adminpanel &elevel [player] [number] &3- &7Set players Level"
			send " <##00f818>/adminpanel &eexp [player] [number] &3- &7Set players Experience"
			send " <##00f818>/adminpanel &erebirth [player] [number] &3- &7Set players Rebirth"
			send " <##00f818>/adminpanel &egens [player] [number] &3- &7Set players Max Gens"
			send " <##00f818>/adminpanel &etokens [give/take/set] [player] [amount] &3- &7Tokens"
			send " <##00f818>/adminpanel &egivegen [tier] [player] &3- &7Gives Generator"
			send " <##00f818>/adminpanel &ebypassedit &3- &7Allows to break blocks on farms"
			send " <##00f818>/adminpanel &ebypassowner &3- &7Bypass Tool/Generator Owner"
			send " <##00f818>/adminpanel &ereset [player] &3- &7Reset players Stats"
			send " <##00f818>/adminpanel &einfo [player] &3- &7Shows player Stats"
			send " <##00f818>/adminpanel &estartevent [eventname] &3- &7Start Global Event"
			send " <##00f818>/adminpanel &ediscoball &3- &7Set Vote Party Disco Ball location"
			send " <##00f818>/adminpanel &esellwand [uses] [multiplier] &3- &7Set Vote Party Disco Ball location"
			send " <##00f818>/adminpanel &evoteparty &3- &7Start Vote Party"
			send " <##00f818>/adminpanel &etool [type] [level] &3- &7Get any farming tool"
			send ""
			send " <##00f818>/adminpet &3- &7Pets admin command panel"
			send " <##00f818>/xqeffects &3- &7Additional effects command"
			send ""
		else:
			if arg-1 is "setobjective":
				set {Objective::%player%} to arg-2
				send "&aSuccess!"
				stop
			if arg-1 is "startevent":
				set {_events::*} to "Random", "DoubleXP", "DoubleDrop", "GensTier", "FarmingBoost"
				if arg-2 is not set:
					send ""
					send "&cUse /adminpanel startevent (EVENT)"
					send "&cAvailable events:"
					loop {_events::*}:
						send " &c* %loop-value%"
					send ""
					stop
				if {_events::*} contains arg-2:
					startevent(arg-2)
				else:
					send ""
					send "&cUnknown event! Available events:"
					loop {_events::*}:
						send " &c* %loop-value%"
					send ""
				stop
			if arg-1 is "dungeons" or "dungeon":
				if arg-2 is not set:
					send ""
					send " <##00f818>/adminpanel dungeons &astart &3- &7Starts dungeons"
					send " <##00f818>/adminpanel dungeons &astop &3- &7Close dungeons"
					send ""
				if arg-2 is "stop" or "close":
					if {Dungeons-Open} is true:
						send {Config::Global::Success}
						closedungeons()
					else:
						send "&cDungeons are already closed!"
				if arg-2 is "start" or "open":
					if {Dungeons-Open} is true:
						send "&cThe dungeons are already open!"
						stop
					send {Config::Global::Success}
					startdungeon()
				stop
			if arg-1 is "genslot":
				if arg-2 parsed as number > 1:
					set {_name} to {Config::Utils2::ExtraGenSlot::Name-2}
				else:
					set {_name} to {Config::Utils2::ExtraGenSlot::Name-1}
				replace all "{AMOUNT}" with arg-2 in {_name}
				set {_lore::*} to {Config::Utils2::ExtraGenSlot::Lore::*}
				replace all "{AMOUNT}" with arg-2 in {_lore::*}
				replace all "{MAX}" with "%{Config::Gens::ExtraGenSlot::Limit}%" in {_lore::*}
				set {_item} to {Config::Utils2::ExtraGenSlot::Item} named formatted gradient({_name}, ({Config::Utils2::ExtraGenSlot::Colors::1}, {Config::Utils2::ExtraGenSlot::Colors::2})) with lore {_lore::*}
				set int tag "ExtraGens" of custom nbt of {_item} to arg-2 parsed as number
				give player {_item}
				send "&aSuccess!"
				stop
			if arg-1 is "customitems":
				customItemsINV(player)
				stop
			if arg-1 is "sellwand":
				if arg-2 is not set:
					give player givesellwand(100, 1)
					give player givesellwand(250, 1)
					give player givesellwand(500, 1)
					send "&aSuccess!"
				else:
					if arg-3 is not set:
						send "&cPlease set multiplier!"
						stop
					give player givesellwand(arg-2 parsed as number, arg-3 parsed as number)
					send "&aSuccess!"
				stop
			else if arg-1 is "tool" or "tools":
				if arg-2 is not set:
					send ""
					send " &6&lAdmin Tools"
					send ""
					send " &6/admintool &e[Type] [Level] &3- &aGet any tool"
					send " &6/toolcreator &e[Type] [Radius] &3- &aCreate Tool Boosts"
					send ""
					send " &a[Type] &3- &7Hoe/Pickaxe/Axe/FishingRod"
					send " &a[Level] &3- [1, 80]"
					send ""
					stop
				if arg-2 is not "Hoe" or "Pickaxe" or "Axe" or "FishingRod":
					send "&cUnknown item type!"
					stop
				if generateItem(arg-3 parsed as number, arg-2, 0) is not set:
					send "&cThere is no such level of tool!"
					stop
				set {_item} to generateItem(arg-3 parsed as number, arg-2, 0)
				if {Config::Update35::ToolStats} is true:
					replace all "{USES}" with "0" in {_item}'s lore
				give player {_item}
				send player title "" with subtitle "<##FCA805>&lSuccess!" for 1 second
				send "&aSuccess!"
				play sound "entity.arrow.hit_player" with pitch 1.6 for player
				stop
			else if arg-1 is "voteparty":
				send "&aSuccess!"
				votePartyEffect()
				stop
			else if arg-1 is "islandanimloc":
				if arg-2 is not "confirm":
					send "&cPlease use /adminpanel islandanimloc confirm to confirm!"
				else:
					set {IslandAnim::Loc} to location at player
					send "&aSuccess"
				stop
			else if arg-1 is "discoball":
				set {DiscoBallLoc} to location at targeted block
				make 30 of end rod at targeted block with extra 0.1
				make 30 of firework at targeted block with extra 0.1
				send "&aSuccess!"
				stop
			else if arg-1 is "tokens":
				if arg-2 is "give":
					if arg-3 is set:
						if arg-4 is set:
							add arg-4 to {Tokens::%arg-3%}
							send "&aSuccess!"
						else:
							send "&cSelect amount!"
					else:
						send "&cSelect player!"
					stop
				if arg-2 is "set":
					if arg-3 is set:
						if arg-4 is set:
							set {Tokens::%arg-3%} to arg-4
							send "&aSuccess!"
						else:
							send "&cSelect amount!"
					else:
						send "&cSelect player!"
					stop
				if arg-2 is "take":
					if arg-3 is set:
						if arg-4 is set:
							remove arg-4 from {Tokens::%arg-3%}
							send "&aSuccess!"
						else:
							send "&cSelect amount!"
					else:
						send "&cSelect player!"
					stop
				send "&cUse /adminpanel tokens [give/take]"
				stop
			else if arg-1 is "bypassowner":
				if {BypassOwner::%player%} is true:
					set {BypassOwner::%player%} to false
					send {Config::Global::Disabled}
					play sound "entity.arrow.hit_player" with pitch 1.5 for player
				else:
					set {BypassOwner::%player%} to true
					send {Config::Global::Enabled}
					play sound "entity.arrow.hit_player" with pitch 2 for player
				stop
			else if arg-1 is "bypassedit":
				if {BypassEdit::%player%} is true:
					set {BypassEdit::%player%} to false
					send {Config::Global::Disabled}
					play sound "entity.arrow.hit_player" with pitch 1.5 for player
				else:
					set {BypassEdit::%player%} to true
					send {Config::Global::Enabled}
					play sound "entity.arrow.hit_player" with pitch 2 for player
				stop
			else if arg-1 is "tools":
				execute player command "admintool"
				stop
			else if arg-1 is "givegen":
				if arg-2 is not set:
					send "&cYou need to select Gens Tier!"
				else if {Generatory::%arg-2%} is not set:
					send "&cThis Generator Tier doesnt exist!"
				else if arg-3 is not set:
					give {Generatory::%arg-2%} to player
					send "&aReceived Generator Tier &6&l%arg-2%&a!"
				else if {Level::%arg-3%} is not set:
					send "&cOops! I cant find &l%arg-3%&r&c in Database!"
				else:
					set {_p} to arg-3 parsed as offline player
					give {Generatory::%arg-2%} to {_p}
					send "&6&l%arg-3% &aReceived Generator Tier &6&l%arg-2%&a!" to player
					send "&aReceived Generator Tier &6&l%arg-2%&a!"
				stop
			else if arg-1 is "level":
				if arg-2 is not set:
					send "&cYou need to select player!"
				else if arg-3 is not set:
					send "&cSelect new Level value!"
				else if {Level::%arg-2%} is not set:
					send "&cOops! I cant find &l%arg-2%&r&c in Database!"
				else:
					if arg-3 parsed as number < 0:
						send "&cThis Value is too small!"
						stop
					set {Level::%arg-2%} to arg-3 parsed as number
					send "&6&l%arg-2% &aLevel has been set to &6&l%arg-3%&a!"
				stop
			else if arg-1 is "rebirth":
				if arg-2 is not set:
					send "&cYou need to select player!"
				else if arg-3 is not set:
					send "&cSelect new Rebirth value!"
				else if {Rebirth::%arg-2%} is not set:
					send "&cOops! I cant find &l%arg-2%&r&c in Database!"
				else:
					if arg-3 parsed as number < 0:
						send "&cThis Value is too small!"
						stop
					set {Rebirth::%arg-2%} to arg-3 parsed as number
					send "&6&l%arg-2% &aRebirth has been set to &6&l%arg-3%&a!"
				stop
			else if arg-1 is "exp":
				if arg-2 is not set:
					send "&cYou need to select player!"
				else if arg-3 is not set:
					send "&cSelect new Exp value!"
				else if {Exp::%arg-2%} is not set:
					send "&cOops! I cant find &l%arg-2%&r&c in Database!"
				else:
					if arg-3 parsed as number < 0:
						send "&cThis Value is too small!"
						stop
					set {Exp::%arg-2%} to arg-3 parsed as number
					send "&6&l%arg-2% &aExp has been set to &6&l%arg-3%&a!"
				stop
			else if arg-1 is "gens":
				if arg-2 is not set:
					send "&cYou need to select player!"
				else if arg-3 is not set:
					send "&cSelect new Gens value!"
				else if {GensMAX::%arg-2%} is not set:
					send "&cOops! I cant find &l%arg-2%&r&c in Database!"
				else:
					if arg-3 parsed as number < 0:
						send "&cThis Value is too small!"
						stop
					set {GensMAX::%arg-2%} to arg-3 parsed as number
					send "&6&l%arg-2% &aGens has been set to &6&l%arg-3%&a!"
				stop
			else if arg-1 is "reset":
				if arg-2 is not set:
					send "&cYou need to select player!"
				else if {GensMAX::%arg-2%} is not set:
					send "&cOops! I cant find &l%arg-2%&r&c in Database!"
				else:
					despawn(arg-2 parsed as offline player, {CurrentPet::%arg-2%})
					delete {CurrentPet::Item::%arg-2%}
					delete {Pets::%arg-2%::*}
					delete {CurrentPet::%arg-2%}
					set {GensMAX::%arg-2%} to {Config::Gens::Event::MaxGens}
					set {Level::%arg-2%} to 1
					set {Exp::%arg-2%} to 0
					set {Tokens::%arg-2%} to 0
					set {Rebirth::%arg-2%} to 0
					delete {ResetDelay::%arg-2%}
					delete {ExtraGensUsed::%arg-2%}
					teleport arg-2 parsed as offline player to {spawn}
					if {Config::Update35::ResetDeleteIsland} is true:
						clear arg-2 parsed as offline player's inventory
						loop 2 times:
							execute console command "/bsbadmin delete %arg-2%"
					loop {New-Generator::%arg-2%::*}:
						set block at loop-value to air
						delete {GeneratorType::%location at loop-value%}
						delete {GeneratorCreator::%location at loop-value%}
						remove location at loop-value from {GlobalActiveGens::*}
						if {GeneratorType::%location at loop-value%::Broken} is true:
							set {_entity} to {BrokenGen::%location at loop-value%} parsed as entity
							kill {_entity}
							delete {GeneratorType::%location at loop-value%::Broken}
					clear {New-Generator::%arg-2%::*}
					set arg-2 parsed as offline player's balance to 0
					set {_checks::*} to "Gens" and "Speed" and "Size" and "Members" and "Flight"
					loop {_checks::*}:
						delete {Upgrades::%arg-2%::%loop-value%}
					set {CaveUpgrade-Regen::%arg-2%} to false
					set {CaveUpgrade-Exp::%arg-2%} to false
					clear {BoostLevel::%arg-2%::*}
					send "&6&l%arg-2% &aStats has been reseted!"
				stop
			else if arg-1 is "info" or "stats":
				if arg-2 is not set:
					send "&cYou need to select player!"
				else if {GensMAX::%arg-2%} is not set:
					send "&cOops! I cant find &l%arg-2%&r&c in Database!"
				else:
					set {_cash} to 0
					loop {New-Generator::%arg-2%::*}:
						set {_level} to {GeneratorType::%location at loop-value%}
						add int tag "ItemValue" of custom nbt of {GeneratoryItems::%{_level}%} to {_cash}
					set {_cash} to "%{_cash}%"
					send ""
					send " &6&l%arg-2% sá´á´á´s"
					send ""
					send "  &6ð¥ &fÉ¢á´É´á´Êá´á´á´Ês: <##7dfc32>%size of {New-Generator::%arg-2%::*}% <##e0e0ff>/ <##cacafc>%{GensMAX::%arg-2%}%"
					send "  &e$ &fá´á´ÊÉ´ÉªÉ´É¢s: &e%formatnumber({_cash})%$ &b/ &a20 seconds"
					send ""
					send "  &6ð¥ &fÊá´á´ á´Ê: &6%{Level::%arg-2%} ? 0%"
					send "  &eâ &fÊá´ÊÉªÊá´Ê: &e%{Rebirth::%arg-2%} ? 0%"
					send "  &aâ &fá´xá´: &a%{Exp::%arg-2%} ? 0% &b/ &e%round(({Level::%arg-2%}*750)*1.5)%"
					send "  &aâ &fá´á´á´á´É´s: &a%{Tokens::%arg-2%}%"
					send ""
				stop
			else if arg-1 is "data":
				set {_cash} to 0
				set {_size} to 0
				set {_offline::*} to all offline players
				loop {_offline::*}:
					loop {New-Generator::%loop-value%::*}:
						add 1 to {_size}
				set {_offline::*} to all offline players
				set {_online::*} to all players
				send ""
				send " &6&lsá´Êá´ á´Ê ÉªÉ´Òá´"
				send ""
				send "  &eð¥ &fÉ¢á´É´á´Êá´á´á´Ês: &e%{_size}%"
				send "  &eâ &fá´á´ á´Êá´É¢á´ É¢á´É´s &e%round(({_size})/(size of {_offline::*}+size of {_online::*}))% &7/ &aá´Êá´Êá´Ê"
				send "  &aâ &fá´á´á´á´Ê á´Êá´Êá´Ês &3- &a%size of {_offline::*}+size of {_online::*}%"
				send ""
				play sound "entity.experience_orb.pickup" with pitch 2 for player
				stop
			send "&cBad usage of command!"

function customItemsINV(player: player):
	set {_x} to chest inventory with 4 rows named "&8Custom Items"
	add {Config::Update35::MagicHoe} to {_x}
	add {Config::Update35::MagicBoneMeal} to {_x}
	set {_PetsEgg} to {PetsEgg::Icon} named {Config::GUIS::Update31::MagicEgg::Name} with lore {Config::GUIS::Update31::MagicEgg::Lore::*}
	set int tag "PetEgg" of custom nbt of {_PetsEgg} to 1
	add {_PetsEgg} to {_x}
	add {Config::GUIS::Update31::SellChest} to {_x}
	add {GenData::crystalshard} to {_x}
	set {_items::*} to {Config::Utils4::ExpBooster} and {Config::Utils4::DropBooster} and {Config::Utils4::GenBooster}
	set {_data::*} to "ExpBooster" and "DropBooster" and "GenBooster"
	loop {_items::*}:
		set {_item} to loop-value
		set {_lore::*} to lore of {_item}
		replace all "{DURATION}" in {_lore::*} with timespan_format("%{Config::Utils4::BoosterDur}% minutes" parsed as timespan)
		set lore of {_item} to {_lore::*}
		set string tag "BoosterInfo" of custom nbt of {_item} to {_data::%loop-counter%}
		add {_item} to {_list::*}
	add {_list::*} to {_x}
	loop 3 times:
		if loop-value > 1:
			set {_name} to {Config::Utils2::ExtraGenSlot::Name-2}
		else:
			set {_name} to {Config::Utils2::ExtraGenSlot::Name-1}
		replace all "{AMOUNT}" with "%loop-value%" in {_name}
		set {_lore::*} to {Config::Utils2::ExtraGenSlot::Lore::*}
		replace all "{AMOUNT}" with "%loop-value%" in {_lore::*}
		replace all "{MAX}" with "%{Config::Gens::ExtraGenSlot::Limit}%" in {_lore::*}
		set {_item} to {Config::Utils2::ExtraGenSlot::Item} named formatted gradient({_name}, ({Config::Utils2::ExtraGenSlot::Colors::1}, {Config::Utils2::ExtraGenSlot::Colors::2})) with lore {_lore::*}
		set int tag "ExtraGens" of custom nbt of {_item} to loop-value
		add {_item} to {_x}
	add givesellwand(100, 1) to {_x}
	add givesellwand(250, 1) to {_x}
	add givesellwand(500, 1) to {_x}
	loop all integers between 7000 and 7011:
		add {GenData::Potion::%loop-value%} to {_x}
	open {_x} for {_player}

function givesellwand(uses: number, multi: number) :: item:
	set {_lore::*} to {Config::Update35::SellWandLore::*}
	replace all "{USES}" with "%{_uses}%" in {_lore::*}
	replace all "{MULTIPLIER}" with "%{_multi}%" in {_lore::*}
	set {_name} to name of {Config::Update35::SellWandItem}
	replace all "{USES}" with "%{_uses}%" in {_name}
	set {_item} to {Config::Update35::SellWandItem} named {_name} with lore {_lore::*}
	set int tag "Uses" of custom nbt of {_item} to {_uses}
	set float tag "Multiplier" of custom nbt of {_item} to {_multi}
	return {_item}

import:
	me.gypopo.economyshopgui.api.EconomyShopGUIHook

on right click on chest:
	set {_uses} to int tag "Uses" of custom nbt of player's tool
	set {_multi} to float tag "Multiplier" of custom nbt of player's tool
	if {_uses} is set:
		cancel event
		if {SellCooldown::%player%} is not set:
			set {SellCooldown::%player%} to 6 seconds from now
		if difference between now and {SellCooldown::%player%} > 5 seconds:
			set {SellCooldown::%player%} to now
			if placeholder "bskyblock_on_island" from player is "true":
				loop all items in inventory of clicked block:
					set {_a} to loop-value
					set {_cost} to int tag "ItemValue" of custom nbt of loop-value
					if {_cost} is not set:
						set {_cost} to EconomyShopGUIHook.getItemSellPrice({_a})
					if {_cost} is set:
						add item amount of loop-value to {_items}
						add {_cost} * item amount of loop-value to {_value}
						add loop-value-1 to {_toRemove::*}
				if {_value} is set:
					set {_value} to {_value}*(1+({Rebirth::%player%}*0.05)) # Rebirth Multiplier
					if {CurrentPet::Item::%player%} is set:
						set {_value} to {_value}*(float tag "Multi-Money" of custom nbt of {CurrentPet::Item::%player%} ? 1)
					loop 3 times:
						set {_check} to difference between now and {ActivePot::%{_player}%::Start::ExtraSell-%loop-value%}
						if {_check} < {ActivePot::%{_player}%::Type::ExtraSell-%loop-value%}:
							set {_extrasell} to 1+((loop-value/20)*2)
					if {_extrasell} is set:
						set {_value} to ({_value}*{_extrasell})
					remove {_toRemove::*} from inventory of clicked block
					set {_value} to {_value}*{_multi}
					add {_value} to player's balance
					set {_items-Text} to "%{_items}%"
					set {_value-Text} to "%floor({_value})%"
					set {_mess::*} to {Config::Update35::Success::*}
					replace all "{ITEMS}" with formatnumber({_items-Text}) in {_mess::*}
					replace all "{TOTAL}" with formatnumber({_value-Text}) in {_mess::*}
					loop {_mess::*}:
						send loop-value to player
					play sound "entity.player.levelup" with pitch 2 for player
					play sound "item.trident.throw" with volume 0.2 and pitch 2 for player
					play sound "block.beehive.exit" with volume 0.6 and pitch 1 for player
					play sound "entity.illusioner.cast_spell" with volume 0.3 and pitch 1.3 for player
					sellEffect(location at clicked block, {_value})
					remove 1 from {_uses}
					if {_uses} is 0:
						set player's tool to air
						send {Config::Update35::SellwandDestroyed} to player
						play sound "entity.item.break" with pitch 0.5 for player
						stop
					set player's tool to givesellwand({_uses}, {_multi})
				else:
					send {Config::Update35::Nothingtosell} to player
					play sound "entity.illusioner.mirror_move" with pitch 2 for player
			else:
				send {Config::Update35::NotYourChest} to player
				play sound "entity.illusioner.mirror_move" with pitch 2 for player
		else:
			set {_mess} to {Config::Update35::SellDelay}
			set {_sec} to "%seconds of difference between now and {SellCooldown::%player%}%" parsed as number
			replace all "{TIME}" with "%5-{_sec}%" in {_mess}
			send {_mess} to player
			play sound "entity.illusioner.mirror_move" with pitch 2 for player

function sellEffect(loc: location, amount: number):
	set {_loc} to location 0.5 above {_loc}
	spawn text display at {_loc}:
		set {_entity} to the display
		set billboard of the last spawned text display to center
		set display scale of entity to vector(0,0,0)
		set {_am} to "%{_amount}%"
		set display text of entity to colored "<##1ef91e>+&l%formatnumber({_am})%$"
		set display text background color of entity to bukkitColor(0,0,0,0)
		set display item of entity to {_type}
		set teleport duration of entity to 40 ticks
	set {_loc} to location 0.8 above {_loc}
	teleport {_entity} to {_loc}
	set {_Ease-InOut::*} to 0.1, 0.22, 0.36, 0.52, 0.68, 0.82, 0.92, 0.98, 1
	loop {_Ease-InOut::*}:
		set {_scale} to loop-value*1.3
		set display scale of {_entity} to vector({_scale}, {_scale}, {_scale})
		set interpolation duration of {_entity} to 1 tick
		set interpolation start of {_entity} to 0
		wait 1 tick
	loop reversed {_Ease-InOut::*}:
		set {_scale} to loop-value*1.3
		set display scale of {_entity} to vector({_scale}, {_scale}, {_scale})
		set interpolation duration of {_entity} to 1 tick
		set interpolation start of {_entity} to 0
		wait 1 tick
	kill {_entity}

command /top:
	cooldown: 5 seconds
	cooldown message: &cPlease wait some time before next usage!
	aliases: leaderboard, top10, top3
	trigger:
		top(player)

on join:
	if {Objective::%player%} is set:
		wait 1 second
		send "" to player
		send {Config::Utils3::WelcomeMess1} to player
		send "" to player
		set {_mess} to {Config::Utils3::WelcomeMess2}
		replace all "{ONLINE}" with "%online player count%" in {_mess}
		send {_mess}
		send "" to player
		send {Config::Utils3::WelcomeMess3}
		send {Config::Utils3::WelcomeMess4}
		send "" to player
		send {Config::Utils3::WelcomeMess5}
		send {Config::Utils3::WelcomeMess6}
		send "" to player
		send {Config::Utils3::WelcomeMess7}
		send "" to player

every 10 seconds:
	set {_time} to placeholder "localtime_timezone_CET" from {_list::1}
	loop {Config::Farms::EventsStart::*}:
		if "%{_time}%" contains "%loop-value%":
			if size of all players > 0:
				if {FarmsEvent} <= 0:
					farmsEvent({Config::Farms::Duration})
				else if {FarmsEvent} is not set:
					farmsEvent({Config::Farms::Duration})

command /farmEvent [<number>]:
	permission: *
	permission message: %{Config::Global::Permission}%
	trigger:
		if arg-1 is not set:
			send "&cCorrect usage: /farmEvent (Time in seconds)"
			stop
		farmsEvent(arg-1)

function farmsEvent(time: number):
	loop all players:
		sfx(loop-player, "EventStart")
	eventMessage("FarmBoost")
	set {FarmsEvent} to {_time}
	wait 5 seconds
	while {FarmsEvent} > 0:
		remove 1 from {FarmsEvent}
		set {_min} to floor({FarmsEvent} / 60)
		set {_full_sec} to {FarmsEvent} - ({_min} * 60)
		set {_minstr} to "%{_min}%"
		set {_sekstr} to "%{_full_sec}%"
		if length of {_minstr} is 1:
			set {_minstr} to "0%{_minstr}%"
		if length of {_sekstr} is 1:
			set {_sekstr} to "0%{_sekstr}%"
		set {_output} to "%{_minstr}%:%{_sekstr}%"
		loop {FarmEventList::*}:
			set {_entity} to loop-value parsed as entity
			set display text of {_entity} to "<##fffffc>î¤%nl%<##ffc629>%{Config::GUIS::Update31::FarmingEvent}%%nl%&f%{_output}%"
		wait 1 second
	endFarmsEvent()

on load:
	endFarmsEvent()
	set {SellChestTimeAccumulator} to 0
	set {SellChestProcessIndex} to 1

function endFarmsEvent():
	if {FarmsEvent} <= 0:
		loop all players:
			sfx(loop-player, "EventEnd")
		send "" to all players
		set {_mess} to {Config::Gens::Event::End}
		replace all "{EVENT}" with {Config::Gens::EventName::FarmBoost} in {_mess}
		send formatted {_mess} to all players
		send "" to all players
	delete {FarmsEvent}

function sellchest(player: player, data: location):
	set {SellChest-Current::%{_player}%} to {_data}
	set {_x} to chest inventory with 4 rows named {Config::GUIS::SellChest::%{Bedrock::%{_player}%}%}
	set {_item} to {Config::GUIS::SellChest::Hologram}
	replace all "{STATUS}" with "%{SellChests-HoloToggle::%{_data}%}%" in {_item}'s lore
	set slot 19 and 20 and 21 of {_x} to {_item}
	set slot 4 of {_x} to {Config::GUIS::Update31::SellChest}
	set {_items} to "%{SellChests-Collected::%{_data}%}%"
	set {_value} to "%{SellChests-TotalValue::%{_data}%}%"
	set {_item} to {Config::GUIS::SellChest::Informations}
	replace all "{ITEMS}" with formatnumber({_items}) in {_item}'s lore
	replace all "{TOTAL}" with formatnumber({_value}) in {_item}'s lore
	set slot 23 and 24 and 25 of {_x} to {_item}
	open {_x} for {_player}

on place:
	set {_a} to player's tool
	if boolean tag "SellChest" of custom nbt of {_a} is true:
		set {_sellchestholo::*} to {Config::Utils::SellChest::Hologram::*}
		replace all "{PLAYER}" with "%player%" in {_sellchestholo::*}
		replace all "{MONEY}" with "0" in {_sellchestholo::*}
		spawn a text display at location 0.75 above event-block:
			set {_entity} to entity
			set display billboard of entity to center
			set display text of entity to {_sellchestholo::*}
		set {SellChest-Holo::%location at event-block%} to uuid of {_entity}
		make 25 of happy villager at event-block with offset vector(1, 1, 1)
		send {Config::Utils::SellChest::Placed} to player
		play sound "entity.experience_orb.pickup" with pitch 2 for player
		add location at event-block to {SellChests::*}
		set {SellChests-HoloToggle::%location at event-block%} to "&aEnabled"
		set {SellChests-Collected::%location at event-block%} to 0
		set {SellChests-TotalValue::%location at event-block%} to 0
		set {SellChests-Owner::%location at event-block%} to player
on break:
	if {SellChests-Owner::%location at event-block%} is set:
		clear drops
		kill {SellChest-Holo::%location at event-block%} parsed as entity
		remove location at event-block from {SellChests::*}
		delete {SellChests-Collected::%location at event-block%}
		delete {SellChests-TotalValue::%location at event-block%}
		delete {SellChests-Owner::%location at event-block%}
		delete {SellChests-HoloToggle::%location at event-block%}
		send {Config::Utils::SellChest::Destroyed} to player
		play sound "entity.experience_orb.pickup" with pitch 1.8 for player
		clear drops
		drop {Config::GUIS::Update31::SellChest} at event-block without velocity

on right click:
	if {SellChests-Owner::%location at event-block%} is set:
		cancel event
		sellchest(player, location at event-block)

on inventory click:
	if name of current inventory of player is {Config::GUIS::Top::Default} or {Config::GUIS::Top::Bedrock}:
		cancel event
		stop
	else if name of current inventory of player is {Config::GUIS::SellChest::Default} or {Config::GUIS::SellChest::Bedrock}:
		cancel event
		if {SellChest-Current::%player%} is not set:
			stop
		if clicked slot is 19 or 20 or 21:
			play sound "entity.experience_orb.pickup" with pitch 2 for player
			if {SellChests-HoloToggle::%{SellChest-Current::%player%}%} is "&aEnabled":
				kill {SellChest-Holo::%{SellChest-Current::%player%}%} parsed as entity
				set {SellChests-HoloToggle::%{SellChest-Current::%player%}%} to "&cDisabled"
				send {Config::Utils3::HoloChanged}
			else:
				set {SellChests-HoloToggle::%{SellChest-Current::%player%}%} to "&aEnabled"
				set {_data} to "%{SellChests-TotalValue::%{SellChest-Current::%player%}%}%"
				set {_sellchestholo::*} to {Config::Utils::SellChest::Hologram::*}
				replace all "{PLAYER}" with "%player%" in {_sellchestholo::*}
				replace all "{MONEY}" with formatnumber({_data}) in {_sellchestholo::*}
				spawn a text display at location 0.75 above {SellChest-Current::%player%}:
					set {_entity} to entity
					set display billboard of entity to center
					set display text of entity to {_sellchestholo::*}
				set {SellChest-Holo::%{SellChest-Current::%player%}%} to uuid of {_entity}
				send {Config::Utils3::HoloChanged}
			close player's inventory
	else if name of current inventory of player is "Repair & Name":
		if int tag "ItemValue" of custom nbt of clicked slot is set:
			cancel event
			stop
		if int tag "Tool-Level" of custom nbt of clicked slot is set:
			cancel event
			stop
		stop
	else if name of current inventory of player is {Config::GUIS::Tokens::Default} or {Config::GUIS::Tokens::Bedrock}:
		cancel event
		set {_slots::*} to 10 and 11 and 20
		set {_perms::*} to "essentials.hat" and "essentials.feed" and "essentials.fly"
		set {_title::*} to {Config::GUIS::Update31::TokensStore::PermsNames::*}
		set {_costs::*} to 500 and 500 and 1500
		set {_owner} to placeholder "bskyblock_island_owner" from player
		loop {_slots::*}:
			if clicked slot is loop-value:
				if {_perms::%loop-counter%} is "essentials.fly":
					if {Upgrades::%{_owner}%::Flight} > 0:
						stop
				if player has permission {_perms::%loop-counter%}:
					stop
				else:
					if {Tokens::%player%} >= {_costs::%loop-counter%}:
						execute console command "lp user %player% permission set %{_perms::%loop-counter%}%"
						remove {_costs::%loop-counter%} from {Tokens::%player%}
						TokensPurchased(player, {_title::%loop-counter%}, {_costs::%loop-counter%})
						tokens(player)
					else:
						NotEnoughTokens(player)
		set {_PetsEgg} to {PetsEgg::Icon} named {Config::GUIS::Update31::MagicEgg::Name} with lore {Config::GUIS::Update31::MagicEgg::Lore::*}
		set int tag "PetEgg" of custom nbt of {_PetsEgg} to 1
		set {_slots::*} to 12 and 13 and 14 and 15 and 16 and 21 and 22 and 23 and 24
		set {_items::*} to generateItem(15, "Hoe", 3) and givesellwand(100, 1) and {_PetsEgg} and elytra and tripwire hook and givesellwand(250, 1) and hay block and ({Config::GUIS::Update31::SellChest}) and beacon
		set {_title::*} to {Config::GUIS::Update31::TokensStore::Names::*}
		set {_costs::*} to 6000 and 750 and 4500 and 550 and 500 and 1200 and 1500 and 2000 and 3500
		loop {_slots::*}:
			if clicked slot is loop-value:
				if {Tokens::%player%} >= {_costs::%loop-counter%}:
					if {_items::%loop-counter%} is tripwire hook:
						execute console command "crates key give %player% legendary 1"
					else if {_items::%loop-counter%} is hay block:
						execute console command "eco give %player% 1000000000"
					else:
						give player {_items::%loop-counter%}
					remove {_costs::%loop-counter%} from {Tokens::%player%}
					TokensPurchased(player, {_title::%loop-counter%}, {_costs::%loop-counter%})
				else:
					NotEnoughTokens(player)
		stop
	else if name of current inventory of player is "Crafting":
		if clicked slot is 0:
			loop 9 times:
				if int tag "ItemValue" of custom nbt of slot loop-value of current inventory of player is set:
					cancel event
					stop
				if int tag "Tool-Level" of custom nbt of slot loop-value of current inventory of player is set:
					cancel event
					stop
		stop
	else if name of current inventory of player is {Config::GUIS::Help::Default} or {Config::GUIS::Help::Bedrock}:
		cancel event
		if clicked slot is 12:
			upgrades(player)
		if clicked slot is 13:
			execute player command "buygen"
		if clicked slot is 14:
			warp(player)
		if clicked slot is 15:
			execute player command "shop"
		if clicked slot is 16:
			execute player command "ranks"
		if clicked slot is 20:
			nick(player)
		if clicked slot is 21:
			execute player command "kit"
		if clicked slot is 22:
			daily(player)
		if clicked slot is 23:
			wait 1 tick
			execute player command "icon"
		if clicked slot is 24:
			panel(player)

every 1 second:
	if size of {SellChests::*} is 0:
		stop
	set {_totalSellChests} to size of {SellChests::*}
	if {_totalSellChests} is 0:
		set {SellChestTimeAccumulator} to 0
		stop
	set {_timePerSellChest} to 20 / {_totalSellChests}
	add 1 to {SellChestTimeAccumulator}
	while {SellChestTimeAccumulator} >= {_timePerSellChest}:
		subtract {_timePerSellChest} from {SellChestTimeAccumulator}
		if {SellChestProcessIndex} > {_totalSellChests}:
			set {SellChestProcessIndex} to 1
		set {_sLoc} to {SellChests::%{SellChestProcessIndex}%}

		if block at {_sLoc} is not air:
			delete {_value}
			delete {_items}
			play sound "block.beacon.power_select" with volume 0.5 and pitch 2 at {_sLoc}
			loop all dropped items in radius 5 around {_sLoc}:
				delete {_cost}
				set {_data} to item of loop-dropped items
				set {_cost} to int tag "ItemValue" of custom nbt of {_data}
				if {_cost} is not set:
					set {_cost} to EconomyShopGUIHook.getItemSellPrice({_data})
				if {_cost} is set:
					add {_cost}*item amount of {_data} to {_value}
					add 1*item amount of {_data} to {_items}
					kill loop-dropped item
			add {_items} to {SellChests-Collected::%{_sLoc}%}
			add {_value} to {SellChests-TotalValue::%{_sLoc}%}
			add {_value} to {SellChests-Owner::%{_sLoc}%}'s balance
			if {SellChests-HoloToggle::%{_sLoc}%} is "&aEnabled":
				set {_data} to "%floor({SellChests-TotalValue::%{_sLoc}%})%"
				set {_sellchestholo::*} to {Config::Utils::SellChest::Hologram::*}
				replace all "{PLAYER}" with "%{SellChests-Owner::%{_sLoc}%}%" in {_sellchestholo::*}
				replace all "{MONEY}" with formatnumber({_data}) in {_sellchestholo::*}
				set {_entity} to {SellChest-Holo::%{_sLoc}%} parsed as entity
				set display text of {_entity} to {_sellchestholo::*}
		else:
			remove {_sLoc} from {SellChests::*}
			kill {SellChest-Holo::%{_sLoc}%} parsed as entity
			delete {SellChests::%{_sLoc}%}
			delete {SellChests-Collected::%{_sLoc}%}
			delete {SellChests-TotalValue::%{_sLoc}%}
			delete {SellChests-Owner::%{_sLoc}%}
			delete {SellChests-HoloToggle::%{_sLoc}%}
		add 1 to {SellChestProcessIndex}

command /level:
	aliases: progress
	trigger:
		set {_1} to {Config::Utils3::Level1Format}
		replace all "{PLAYER}" with "%player%" in {_1}
		set {_2} to {Config::Utils3::Level2Format}
		replace all "{LEVEL}" with "%{Level::%player%}%" in {_2}
		replace all "{EXP}" with ecoFormat({Exp::%player%}) in {_2}
		replace all "{REQ}" with ecoFormat(({Level::%player%}*750)*1.5) in {_2}
		set {_4} to {Config::Utils3::Level4Format}
		replace all "{TOKENS}" with "%{Tokens::%player%} ? 0%" in {_4}
		send ""
		send {_1}
		send ""
		send {_2}
		send "   %bar({Exp::%player%}, ({Level::%player%}*750)*1.5, 18)%"
		send ""
		send {_4}
		send ""
		send {Config::Utils3::Level5Format}
		send ""

function bar(exp: number, req: number, icons: number) :: text:
	set {_bar} to ""
	loop {_icons} times:
		if {_exp} >= ({_req}/{_icons})*loop-value:
			set {_bar} to "%{_bar}% &bâ "
		else:
			set {_bar} to "%{_bar}% &7â "
	return {_bar}

command /token:
	aliases: tokens
	trigger:
		tokens(player)

function tokens(player: player):
	set {_x} to chest inventory with 5 rows named {Config::GUIS::Tokens::%{Bedrock::%{_player}%}%}
	set {_item} to {Config::GUIS::Tokens::Info}
	replace all "{TOKENS}" with "%{Tokens::%{_player}%} ? 0%" in {_item}'s lore
	set slot 40 of {_X} to {_item}
	set {_owner} to placeholder "bskyblock_island_owner" from {_player}
	loop 12 times:
		set {_Buy-%loop-value%} to {Config::GUIS::Tokens::ClickToBuy}
	if {_player} has permission "essentials.hat":
		set {_Buy-1} to {Config::GUIS::Tokens::Purchased}
	if {_player} has permission "essentials.feed":
		set {_Buy-2} to {Config::GUIS::Tokens::Purchased}
	if {_player} has permission "essentials.fly":
		set {_Buy-8} to {Config::GUIS::Tokens::Purchased}
	if {Upgrades::%{_owner}%::Flight} > 0:
		set {_Buy-8} to {Config::GUIS::Tokens::Purchased}
	set {_slots::*} to 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24
	loop {_slots::*}:
		set {_item} to {Config::GUIS::Tokens::Slot%loop-counter%}
		replace all "{BOTTOM}" with "%{_Buy-%loop-counter%}%" in {_item}'s lore
		set slot loop-value of {_x} to {_item}
	open {_x} for {_player}

function TokensPurchased(player: player, text: text, price: number):
	set {_mess} to {Config::Utils3::TokensPurchased}
	replace all "{ITEM}" with "%{_text}%" in {_mess}
	replace all "{TOKENS}" with "%{_price}%" in {_mess}
	send {_mess} to {_player}
	play sound "entity.player.levelup" with pitch 2 for {_player}

function NotEnoughTokens(player: player):
	send {Config::Utils3::NotEnoughTokens} to {_player}
	play sound "entity.illusioner.mirror_move" with pitch 2 for {_player}
	close {_player}'s inventory

every 30 minutes:
	loop all players:
		add 5 to {Tokens::%loop-player%}
		add 5000 to loop-player's balance

command /loja:
    trigger:
        execute player command "/economyshopgui:shop"

function top(player: player):
	set {_wait} to 0
	set {_x} to chest inventory with 4 rows named {Config::GUIS::Top::%{Bedrock::%{_player}%}%}
	set {_slots::*} to 11 and 12 and 13 and 14 and 15 and 22
	loop {_slots::*}:
		set slot loop-value of {_x} to {Config::GUIS::Top::Slot%loop-counter%}
	set {_papi::*} to "vault_eco_balance_fixed" and "statistic_mine_block" and "statistic_time_played" and "statistic_mob_kills" and "gens_tokens" and "gens_level"
	set {_slots::*} to 11 and 12 and 13 and 14 and 15 and 22
	set {_suff::*} to "$", " blocks", "", " kills", "", " ð¥"
	loop {_papi::*}:
		add "" to lore of slot {_slots::%loop-counter%} of {_x}
		set {_suffix} to {_suff::%loop-counter%}
		loop 10 times:
			set {_format} to {Config::GUIS::Top::TopFormat%loop-counter-1%}
			replace all "{POS}" with "%loop-value-2%" in {_format}
			set {_papi} to placeholder "ajlb_lb_%loop-value-1%_%loop-value-2%_alltime_name" from {_player}
			replace all "-Unknown" with "None" in {_papi}
			replace all "{NICK}" with {_papi} in {_format}
			set {_papi} to placeholder "ajlb_lb_%loop-value-1%_%loop-value-2%_alltime_value" from {_player}
			replace all "{AMOUNT}" with "%{_papi}%%{_suffix}%" in {_format}
			add {_format} to lore of slot {_slots::%loop-counter-1%} of {_x}
	open {_x} for {_player}


function votePartyEffect():
	loop {Config::Update35::VoteParty::*}:
		set {_key::*} to loop-value split at "|"
		execute console command "crates key giveall %{_key::1}% %{_key::2}%"
	timeChange(false)
	spawnBall({DiscoBallLoc})
	startSpawnConfetti()
	wait 5 tick
	set {_count} to 0
	while {_count} < 120:
		add 1 to {_count}
		ballEffect({DiscoBallLoc})
		wait 4 tick
	wait 1 second
	timeChange(true)

function smoothChange(entity: entity, start: text, end: text, steps: number):
	set {_start::*} to {_start} split at "|"
	set {_end::*} to {_end} split at "|"
	loop 3 times:
		set {_start::%loop-value%} to {_start::%loop-value%} parsed as number
		set {_end::%loop-value%} to {_end::%loop-value%} parsed as number
	loop {_steps}-1 times:
		set {_i} to loop-value
		set {_r} to {_start::1} + ({_end::1} - {_start::1}) * {_i} / ({_steps}-1)
		set {_g} to {_start::2} + ({_end::2} - {_start::2}) * {_i} / ({_steps}-1)
		set {_b} to {_start::3} + ({_end::3} - {_start::3}) * {_i} / ({_steps}-1)
		set {_i} to a potion of luck
		dye {_i} rgb({_r}, {_g}, {_b})
		set display item of {_entity} to {_i} with custom model data 7004
		wait 1 tick

function ballEffect(loc: location):
	set yaw of {_loc} to random integer between 0 and 360
	set pitch of {_loc} to random integer between -90 and 90
	set {_scale} to random integer between 12 and 18
	set {_scale2} to 7+({_scale}/6)
	set {_light} to random integer between 13 and 15
	set {_colors::*} to "255|25|44", "255|142|0", "249|249|2", "1|171|252", "103|2|253", "241|98|248|", "255|255|1"
	set {_c} to random element out of {_colors::*}
	remove {_c} from {_colors::*}
	set {_c2} to random element out of {_colors::*}
	spawn item display at location 1 in front of  {_loc}:
		set {_entity} to the display
		set display scale of entity to vector({_scale2}, {_scale2}, 0)
		set display item of entity to air
		set display brightness of entity to displayBrightness({_light},{_light})
		set teleport duration of entity to 60 ticks
		set interpolation start of entity to 0
		set interpolation duration of entity to 10 tick
	wait 2 tick
	smoothChange({_entity}, {_c}, {_c2}, 60)
	add random integer between -90 and 90 to yaw of {_loc}
	add random integer between -90 and 90 to pitch of {_loc}
	teleport {_entity} to location 1 in front of {_loc}
	set display scale of {_entity} to vector({_scale2}, {_scale2}, {_scale})
	wait 50 ticks
	set interpolation start of {_entity} to 0
	set interpolation duration of {_entity} to 10 tick
	set display scale of {_entity} to vector({_scale2}, {_scale2}, 0)
	wait 10 ticks
	kill {_entity}

function startSpawnConfetti():
	loop 600 times:
		set {_offset} to 25
		set {_minx} to x-coords of {DiscoBallLoc}-{_offset}
		set {_minz} to z-coords of {DiscoBallLoc}-{_offset}
		set {_maxx} to x-coords of {DiscoBallLoc}+{_offset}
		set {_maxz} to z-coords of {DiscoBallLoc}+{_offset}
		set {_y} to y-coords of {DiscoBallLoc} + (random number between -5 and 5) + 2
		set {_x} to random number between {_minx} and {_maxx}
		set {_z} to random number between {_minz} and {_maxz}
		set {_loc} to location at ({_x}, {_y}, {_z}) in world "world"
		chance of 5%:
			set {_fireloc} to location 3 under {_loc}
			set {_ax} to random integer between 1 and 3
			if {_ax} is 1:
				launch trailing flickering ball large coloured red fading to yellow at {_fireloc}'s location with duration 0
			if {_ax} is 2:
				launch trailing flickering ball large coloured yellow fading to light blue at {_fireloc}'s location with duration 0
			if {_ax} is 3:
				launch trailing flickering ball large coloured magenta fading to blue at {_fireloc}'s location with duration 0
		chance of 10%:
			confetti({_loc})
		else:
			confetti2({_loc})
		add 1 to {_a}
		if {_a} < 3:
			wait 1 tick
		else:
			set {_a} to 0


function timeChange(reverse: boolean):
	set {_sf::*} to "pm" and "am"
	if {_reverse} is true:
		set {_sf::*} to "am" and "pn"
	loop 48 times:
		set {_hour} to floor(loop-value / 4)
		set {_minute} to mod(loop-value, 4) * 15
		set {_suffix} to {_sf::1}
		if {_minute} is 0:
			set {_minute} to "00"
		if {_hour} is 12:
			set {_hour} to "00"
			set {_suffix} to {_sf::2}
		set time of world "world" to "%{_hour}%:%{_minute}%%{_suffix}%" parsed as time
		wait 1 tick


function spawnBall(loc: location):
	set pitch of {_loc} to 0
	set yaw of {_loc} to 0
	loop 8 times:
		set {_lv} to loop-value
		add 22.5 to yaw of {_loc}
		if mod(loop-value, 2) is 0:
			add 180 to yaw of {_loc}
		add 0.001 to y-coords of {_loc}
		spawn item display at {_loc}:
			set {_entity%{_lv}%} to the display
			set display brightness of entity to displayBrightness(15,15)
			set display scale of entity to vector(0,0,0)
			set display item of entity to gold nugget with custom model data 7016
			set teleport duration of entity to 60 ticks
	wait 2 ticks
	set {_Bounce-In::*} to 0, 0.1, 0.25, 0.45, 0.7, 0.9, 1.02, 1.08, 1.1, 1.09, 1.07, 1.05, 1.03, 1.01 and 1
	loop {_Bounce-In::*}:
		set {_scale} to 12*loop-value
		loop 8 times:
			if loop-counter-1 is 1:
				set {_loc2} to location at {_entity%loop-value-2%}
				add 90 to yaw of {_loc2}
				teleport {_entity%loop-value-2%} to {_loc2}
			set interpolation start of {_entity%loop-value-2%} to 0
			set interpolation duration of {_entity%loop-value-2%} to 1 tick
			set display scale of {_entity%loop-value-2%} to vector({_scale},{_scale},{_scale})
		wait 1 tick
	wait 40 ticks
	loop 10 times:
		loop 8 times:
			set {_loc2} to location at {_entity%loop-value-2%}
			add 90 to yaw of {_loc2}
			teleport {_entity%loop-value-2%} to {_loc2}
		if loop-value-1 is 10:
			wait 30 ticks
			set {_Bounce-In::*} to reversed 0, 0.1, 0.25, 0.45, 0.7, 0.9, 1.02, 1.08, 1.1, 1.09, 1.07, 1.05, 1.03, 1.01 and 1
			loop {_Bounce-In::*}:
				set {_lv} to loop-value-2
				set {_scale} to 12*{_lv}
				loop 8 times:
					set interpolation start of {_entity%loop-value-3%} to 0
					set interpolation duration of {_entity%loop-value-3%} to 1 tick
					set display scale of {_entity%loop-value-3%} to vector({_scale},{_scale},{_scale})
				wait 1 tick
		else:
			wait 50 ticks
	loop 8 times:
		kill {_entity%loop-value%}

function voteForServer(player: player):
	add 1 to {GlobalServerVotes}
	send "" to {_player}
	set {_mess} to {Config::Update35::Vote::Thanks}
	replace all "{PLAYER}" with "%{_player}%" in {_mess}
	send {_mess} to {_player}
	send "" to {_player}
	set {_key::*} to {Config::Update35::VoteReward} split at "|"
	execute console command "crates key give %{_player}% %{_key::1}% %{_key::2}%"
	if {GlobalServerVotes} is 50:
		set {GlobalServerVotes} to 0
		votePartyEffect()
		play sound "ui.toast.challenge_complete" with pitch 1 for all players
		play sound "ui.toast.challenge_complete" with pitch 0.75 for all players
		play sound "entity.player.levelup" with pitch 1 for all players
		play sound "entity.player.levelup" with pitch 0.5 for all players
		send "" to all players
		send {Config::Update35::VoteParty::1} to all players
		send "" to all players
		send {Config::Update35::VoteParty::2} to all players
		send "" to all players
		send {Config::Update35::VoteParty::3} to all players
		send {Config::Update35::VoteParty::4} to all players
		send "" to all players
		set {_mess} to {Config::Update35::VoteParty::5}
		replace all "{LINK}" with "%{Config::Update35::VoteLink}%" in {_mess}
		send formatted {_mess} to all players
		send "" to all players
	set {_votes} to {GlobalServerVotes} ? 0
	set {_prog} to ({GlobalServerVotes}/{Config::Update35::VoteParty})*100

command /votereward [<player>]:
	permission: *
	trigger:
		voteForServer(arg-1)